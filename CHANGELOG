From 1.6 to 1.7 (on going work : this need to be cleaned up) 
---------------
New features:
* add lazy code parsing: the compiled code attribute is copied into
  the memory but not parsed before it is actually needed.  Copying the
  code attribute allows not to refer to the .class file anymore so
  they can be garbage collected.  Tests that load classes without
  looking at the actual code attributes shows an improvement of 22%
  and 23% of time and memory consumption, respectively.
* it is now possible for JFile.class_path to load the .jar files that
  the given directories contain (so the CLASSPATH environment variable
  can be used as the argument of the function)

Changes in the interface:
* adding version numbers to class file representations (so JUnparse
  output the right version number).  (Note: the current implementation
  does not check that the features actually used match the declared
  version number)
* merge Parse_error, Illegal_value and Class_structure_error
  exception into Class_structure_error exception.
* handling Java 5 signatures for generics (some old signature or
  name_and_type have been renamed to descriptor when appropriate) to
  jProgram, jClass and jClassLow and update handling code (jPrint,
  jDumpLow, jParse, jUnparse, jH2L, jL2H)
* adding attribute EnclosingMethod (introduced with Java 5 for local
  classes) (jProgram, jClass, jClassLow) and update handling code
  (jPrint, jDumpLow, jParse, jUnparse, jH2L, jL2H)
* adding attribute SourceDebugExtension (jProgram, jClass, jClassLow)
  and corresponding handling code (jPrint, jDumpLow, jParse, jUnparse,
  jH2L, jL2H)

Minor changes in the code:
* closing the class_path when the program is loaded (should free some
  memory)
* tableswitch and lookupswitch instructions are now printed
  with all the details (instead of just <...>)
* adding a constraint check on the maximum size of the code attribute
  (65536)
* when an error occurs in low2high_class, it now gives the class name
  in the error message
* improving the documentation

Bugfixes:
* bugfix: replace IO.nread with IO.really_nread as it would be an
  error to read less bytes than what is excepted.
* bugfix: it is now be possible to have more than one
  LocalVariableTable per code attribute (there can be one per local
  variable)


From 1.5 to 1.6
---------------
New features :
* adding a representation for complete programs
* adding a printing module for programs that can output text and html
  code, along with user information
* adding a JPrintHierarchy to print information about the class
  hierarchy, inheritance, overloading, etc.
* adding a ControlFlow module to have some control flow information
  more easily
* adding a lookup function for (loading and writing) individual
  classes in .jar files
* add support for Java 5 flags (enum, synthetic, annotation, bridge,
  varargs, etc.) and improve handling of those flags in general.
* enriching dumping modules to print classes in high or low level
  representation

Changes in the interface :
* classes and interfaces have now different type
* renamed jConsts to jBasics
* moved the definitions of jClassLow also used in jClass to jBasics
* merging OpConst and OpLdc (JDump/JClass/JInstruction) in high level
  class representation
* signatures added to fields and classes in JClass
* the return type has been included in the signature (useful for
  bridge methods)
* method_signature renamed to method_descriptor as it includes the
  return type wich is not part of the signature
* more accurate (and cumbersome) typing for access flags in JClassLow
* some renaming so names should be more 'logic'

Minor changes in the code :
* add more access functions to classes and interfaces
* more consistent treatment of exceptions in all the library
* adding some checks on bytecode generation (JCode)
* adding some checks on conversion (JLow2High)
* some code factorizing (is_dir/is_file) in JFile, for the constant
  pool accesses and in the representation of abstract and concrete
  classes

Bug fix :
* bugfix : in unparsing line number tables
* bugfix : in JDumpBasics.object_value_signature
* bugfix : in JFile, correct a bug when trying to open an nonexistent
  file
* bugfix : in (un-)parsing of BIPush
* bugfix : a ConstantValue attribute was expected for non-static
  fields
* bugfix : in JLow2High : unexpected attributes were causing the
  conversion to fail (it now works and prints a warning)
* bugfix : in JLow2High
* bugfix : in JHigh2Low : correcting some bugs with abstract classes
  and methods
* fix encoding problems in documentation 
* Removed the extlib patch (included in extlib 1.5.1)


From 1.4 to 1.5
---------------
* new type for bytecode instructions (more generic opcodes)
* the low level instructions are still available, and even more low
  level
* change many base types to reflect more accurately the constraints of
  the specification
* fix bugs and change some small other stuff

From 1.0 to 1.4
---------------
This version adds a lot of features (and fixes some bugs) to the latest
version (1.0) distributed by Nicolas Cannasse while keeping an almost
compatible interface.  The differences in the compatible interfaces
includes :
- a few changes in the instruction set
- the AttributeStackMap constructor
- the AccRFU constructor
- an additional parameter in the function JCode.parse_opcode
